{"version":3,"sources":["container/KillObject.js","container/ScoreLine.js","container/GameOver.js","container/TextInput.js","container/Game.js","App.js","serviceWorker.js","index.js"],"names":["KillObject","props","React","useState","top","count","setCount","requestRef","useRef","previousTimeRef","animate","time","undefined","current","deltaTime","prevCount","nextPosition","updatePosition","text","window","innerHeight","requestAnimationFrame","useEffect","cancelAnimationFrame","Container","style","left","defaultProps","alive","styled","div","ScoreLine","Text","score","life","h1","GameOver","url","fontSize","circle","big","message","link","TextInput","Input","autoFocus","onKeyDown","event","console","log","key","onEnter","target","value","input","Game","tarageObjectsArray","interval","state","update","KillObjectCount","showFirework","position","index","findIndex","x","splice","setState","checkAndDestroyIfMatch","enteredValue","length","setTimeout","spawnKillObject","newobject","words","Math","floor","random","innerWidth","push","this","setInterval","fxProps","colors","calc","i","y","GameContainer","map","item","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c708da9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components'\n\nconst KillObject = props => {\n    const [count, setCount] = React.useState(props.top)\n    const requestRef = React.useRef();\n    const previousTimeRef = React.useRef();\n\n    const animate = time => {\n        if (previousTimeRef.current != undefined) {\n            const deltaTime = time - previousTimeRef.current;\n            setCount(prevCount => {\n                const nextPosition = prevCount + deltaTime * 0.1\n                props.updatePosition(nextPosition, props.text)\n                if (nextPosition > window.innerHeight) {\n                    return -50\n                }\n                return nextPosition\n            });\n        }\n        previousTimeRef.current = time;\n        requestRef.current = requestAnimationFrame(animate);\n    }\n\n    React.useEffect(() => {\n        requestRef.current = requestAnimationFrame(animate);\n        return () => cancelAnimationFrame(requestRef.current);\n    }, []);\n\n    return <Container style={{ top: count, left: props.left }}>{props.text}</Container>\n}\n\n\nexport default KillObject\n\nKillObject.defaultProps = {\n    alive: true,\n    left: 0,\n    top: -50\n}\nconst Container = styled.div`\n   position: absolute;\n   padding: 5px;\n   background-color: green;\n   color: white;\n   text-align: center;\n   font-size: 20px;\n`;","import React, { Component } from 'react';\nimport styled from 'styled-components'\n\nconst ScoreLine = props => {\n\n    return (\n        <Container>\n            <Text>Score: {props.score} </Text>\n            <Text>{props.life > -1 ? `Life: ${props.life}` : \"Game Over\"} </Text>\n        </Container>\n    )\n\n}\n\nexport default ScoreLine\n\nconst Container = styled.div`\n          display: flex;\n          flex-direction :row;\n          justify-content: space-between;\n          align-items: center;\n          height: 50px;\n          background-color: green;\n          z-index: 10;\n          padding-left: 10px;\n          padding-right: 10px;\n`;\n\nconst Text = styled.h1`\n        font-size: 16px;\n        color: white;\n`","\nimport React from 'react';\nimport styled from 'styled-components'\nimport { Twitter, Facebook } from 'react-social-sharing'\n\nconst GameOver = props => {\n    let url = \"https://abhishekcode.github.io/TypingGame/\"\n    return (\n        <Container>\n            <Text fontSize={30}>Game Over</Text>\n            <Text fontSize={20}>You scored {props.score}</Text>\n            <Twitter circle big message={` Check this out ${url}`} link={url} />\n            <Facebook circle big link={url} />\n        </Container>\n    )\n\n}\n\nexport default GameOver\n\nconst Container = styled.div`\n          display: flex;\n          flex-direction :column;\n          justify-content: space-between;\n          align-items: center;\n          padding-left: 10px;\n          padding-right: 10px;\n          padding-top: 100px;\n`;\n\nconst Text = styled.h1`\n        font-size: ${props => props.fontSize ? props.fontSize : 30}px;\n        color: black;\n`","\nimport React, { Component } from 'react';\nimport styled from 'styled-components'\n\nconst TextInput = props => {\n    return (\n        <Container>\n            <Input autoFocus onKeyDown={(event) => {\n                console.log(event)\n                if (event.key === 'Enter') {\n                    props.onEnter(event.target.value)\n                    event.target.value = \"\"\n                }\n            }}></Input>\n        </Container>\n    )\n\n}\n\nexport default TextInput\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst Input = styled.input`\n        font-size: ${props => props.fontSize ? props.fontSize : 30}px;\n        width: 400px;\n        height: 60px;\n        color: black;\n        bottom : 10px;\n        position: absolute;\n        background-color: transparent;\n`","import React, { Component } from 'react';\nimport styled from 'styled-components'\nimport KillObject from './KillObject';\nimport words from 'an-array-of-english-words'\nimport ScoreLine from './ScoreLine';\nimport GameOver from './GameOver';\nimport TextInput from './TextInput';\nimport { Fireworks } from 'fireworks/lib/react'\n\n\nclass Game extends Component {\n    tarageObjectsArray = []\n    interval = 1500\n    state = {\n        update: false,\n        KillObjectCount: 5,\n        life: 10,\n        score: 0,\n        showFirework: false\n    }\n    componentDidMount() {\n        this.spawnKillObject()\n        setInterval(() => {\n            this.spawnKillObject()\n        }, this.interval);\n    }\n\n    updatePosition = (position, text) => {\n        if (position > window.innerHeight) {\n            const index = this.tarageObjectsArray.findIndex(x => x.text === text);\n            if (index > -1) {\n                this.tarageObjectsArray.splice(index, 1);\n                this.setState({ update: !this.state.update, life: this.state.life - 1 })\n            }\n        }\n    }\n\n    checkAndDestroyIfMatch = (enteredValue) => {\n        const index = this.tarageObjectsArray.findIndex(x => x.text === enteredValue);\n        if (index > -1) {\n            this.tarageObjectsArray.splice(index, 1);\n            this.setState({ update: !this.state.update, life: this.state.life - 1, score: this.state.score + enteredValue.length, showFirework: true })\n            setTimeout(() => {\n                this.setState({ showFirework: false })\n            }, 1000);\n        }\n    }\n\n    spawnKillObject = () => {\n        let newobject = {\n            text: words[Math.floor(Math.random() * words.length)],\n            updatePosition: this.updatePosition,\n            left: Math.random() * ((window.innerWidth - 100) - 50) + 50\n        }\n\n        this.tarageObjectsArray.push(newobject)\n        this.setState({ update: !this.state.update })\n    }\n\n    render() {\n        let fxProps = {\n            count: 1,\n            interval: 1000,\n            colors: ['#cc3333', '#4CAF50', '#81C784'],\n            calc: (props, i) => ({\n                ...props,\n                x: window.innerWidth / 2,\n                y: window.innerHeight / 2\n            })\n        }\n        return (\n            <GameContainer>\n                {(this.state.showFirework || this.state.life < 0) && <Fireworks {...fxProps} />}\n                <ScoreLine life={this.state.life} score={this.state.score}>   </ScoreLine>\n                {\n                    this.state.life > -1 && this.tarageObjectsArray.map(item => <KillObject key={item.text} {...item}></KillObject>)\n                }\n                {\n                    this.state.life > -1 && <TextInput onEnter={this.checkAndDestroyIfMatch}></TextInput>\n                }\n                {\n                    this.state.life < 0 && <GameOver score={this.state.score} />\n                }\n            </GameContainer>\n        )\n    }\n}\n\n\nexport default Game\n\n\nconst GameContainer = styled.div`\n   display: flex;\n   flex:1;\n   flex-direction :column;\n   min-height: ${window.innerHeight}px;\n   background-color: light;\n`;","import React from 'react';\nimport Game from './container/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}